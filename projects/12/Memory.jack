// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array free_blocks;
    static Array ram;
    /** Initializes the class. */
    function void init() {
        // memory
        let ram = 0;
        // heap base = 2048
        let free_blocks = 2048;
        // size of free blocks
        // length = 0
        let free_blocks[0] = 16383 - 2048;
        // next = 1
        let free_blocks[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array curr, next_list, prev_list;
        var int list_size, next;
        
        if(size < free_blocks[0]){
            let curr = free_blocks + 1;
            let free_blocks = free_blocks + size + 1;
            let free_blocks[0] = curr[-1] - (size+1);
            let curr[-1] =size + 1;
            let free_blocks[1] = null;
            return curr;
        }else{
            let next_list = free_blocks[1];
            let prev_list = free_blocks;
            let list_size = next_list[0];

            while(~(size < list_size) & ~(next_list = null)){
                let prev_list = next_list;
                let next_list = next_list[1];
                let list_size = next_list[0];
            }

            if(size < list_size){
                let curr = next_list + 1;
                let next = next_list[1];
                let next_list = next_list + size + 1;
                let next_list[0] = curr[-1] - (size+1);
                let next_list[1] = next;
                let curr[-1] = size + 1;
                let prev_list[1] = next_list;
                return curr;
            }else{
                return 0;
            }
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array list;
        let list = free_blocks;
        while(~(list[1] = null)){
            let list = list[1];
        }
        let list[1] = o - 1;
        let o[0] = null;
        return;
    }    
}
