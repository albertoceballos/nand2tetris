// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array powTwo;
    static Array screen;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let screen = 16384;
        let powTwo = Array.new(16);
        let powTwo[0] = 1;
		let powTwo[1] = 2;
		let powTwo[2] = 4;
		let powTwo[3] = 8;
		let powTwo[4] = 16;
		let powTwo[5] = 32;
		let powTwo[6] = 64;
		let powTwo[7] = 128;
		let powTwo[8] = 256;
		let powTwo[9] = 512;
		let powTwo[10] = 1024;
		let powTwo[11] = 2048;
		let powTwo[12] = 4096;
		let powTwo[13] = 8192;
		let powTwo[14] = 16384;
		let powTwo[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = 0;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit, mask;
        let address = (x / 16) + (32 * y);
        // set (x%16)th bit of value to current color
        let bit = x-((x/16)*16);
        let mask = powTwo[bit];
        if(color){
            let screen[address] = screen[address] | mask;
        }else{
            let screen[address] = screen[address] & ~mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int temp;
        var int dx, dy;
        var int a, b;
        var int t1, t2;
        let a = 0;
        let b = 0;
        if((x1>x2) & (y1>y2))
		{
			let temp = x1;
			let x1 = x2;
			let x2=temp;
			let temp=y1;
			let y1=y2;
			let y2=y1;
		}
		if((y1>y2) & (x1<x2))
		{
			let temp = x1;
			let x1 = x2;
			let x2=temp;
			let temp=y1;
			let y1=y2;
			let y2=y1;
		}
        let dx = x2-x1;
        let dy = y2-y1;
        // vertical line
        if(dx = 0){
            do Screen.drawPixel(x1,y1);
            while(~(b=dy)){
                if(dy < 0){
                    let b = b - 1;
                }else{
                    let b = b + 1;
                }
                do Screen.drawPixel(x1,y1+b);
            }
        }
        // horizontal line
        if(dy = 0){
            do Screen.drawPixel(x1,y1);
            while(~(a=dx)){
                if(dx < 0){
                    let a = a - 1;
                }else{
                    let a = a + 1;
                }
                do Screen.drawPixel(x1+a,y1);
            }
        }
        // draw line south east
        if((dx > 0) & (dy > 0)){
            let t1 = 0;
            while(~(a>dx) & ~(b>dy)){
                do Screen.drawPixel(x1+a,y1+b);
                if(t1 < 0){
                    let a = a + 1;
                    let t1 = t1 + dy;
                }else{
                    let b = b + 1;
                    let t1 = t1 - dx;
                }
            }
        }
        // draw line south west
        if((dx < 0) & (dy > 0)){
            let t2 = 0;
            while(~(a<dx) & ~(b>dy)){
                do Screen.drawPixel(x1+a,y1+b);
                if(t2 > 0){
                    let a = a - 1;
                    let t2 = t2 - dy;
                }else{
                    let b = b + 1;
                    let t2 = t2 + dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        do Screen.drawLine(x1,y,x2,y);

        while(~(y=y2)){
            let y = y + 1;
            do Screen.drawLine(x1,y,x2,y);
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;
        var int r_square;
        let dy = -r;
        let r_square = r*r;

        while(~(dy>r)){
            let dx = Math.sqrt(r_square - (dy*dy));
            do Screen.drawLine(x-dx,y-dy,x+dx,y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
